To make the **filter functionality visible only when the user is logged in**, you need to conditionally render the filter section based on whether the user is authenticated.

Here’s how you can implement that:

---

### ✅ Step 1: **Track the login state**

Make sure your Vuex store has a `userData` state to track the logged-in user.

In your Vuex store (e.g., `users` module):

```js
state: {
  userData: null,
},
getters: {
  isLoggedIn: (state) => !!state.userData,
},
```

---

### ✅ Step 2: **Use the `isLoggedIn` getter in your filter component**

In your filter component script:

```js
computed: {
  ...mapState({
    showFilter: (state) => state.storeProducts.showFilter,
    originalCategories: (state) => state.storeProducts.selectedCategories,
  }),
  ...mapState('users', ['userData']),
  isLoggedIn() {
    return !!this.userData;
  }
}
```

If you’re using a Vuex namespace like `users`, make sure to use it when mapping state.

---

### ✅ Step 3: **Conditionally render the filters in the template**

In your template:

```html
<div v-if="isLoggedIn">
  <!-- Filters panel -->
  <div class="filters-panel">
    <!-- your filter UI here -->
  </div>
</div>
```

This ensures that **filters only show if a user is logged in**.

---

### ✅ Optional: Redirect if not logged in

If someone tries to open the filter component directly via a route, you can redirect them back:

In the `created()` hook:

```js
created() {
  if (!this.isLoggedIn) {
    this.$router.push({ name: ROUTE_NAMES.LOGIN });
    return;
  }
  // load category data as before
}
```

Let me know if you'd like help implementing this inside your current file structure with namespaced modules (like `users`, `storeProducts` etc).